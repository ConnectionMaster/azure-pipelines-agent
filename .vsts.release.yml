parameters:
- name: version
  type: string
  displayName: Version
  default: 2.999.999
- name: derivedFrom
  type: string
  displayName: Derived From Version
  default: latest
- name: skipTests
  type: boolean
  default: true
  displayName: Skip Tests
# buildStageOnly is useful for testing changes of the build stage which cannot be tested
# in the ci project, like signing, without actually doing a release
- name: buildStageOnly
  type: boolean
  default: false
  displayName: Build Stage Only

variables:
  releaseBranch: releases/${{ parameters.version }}

extends:
  template: .azure-pipelines/pipeline.yml
  parameters:
    branch:  ${{ variables.releaseBranch }}
    componentDetection: false
    test: ${{ not(parameters.skipTests) }}
    sign: false
    publishArtifacts: true

    ${{ if not(parameters.buildStageOnly) }}:
      postBuildStages:
      - stage: Release
        jobs:
        ################################################################################
        - job: publish_agent_packages
        ################################################################################
          displayName: Publish Agents (Windows/Linux/OSX)
          pool:
            name: AzDevProdRMAgents
          steps:

          # Clean
          - checkout: self
            clean: true

          # Switch to release branch
          - template: switch-branch.yml
            parameters:
              branch: ${{ variables.releaseBranch }}
          
          # Download all agent packages from all previous phases
          - task: DownloadBuildArtifacts@0
            displayName: Download Agent Packages
            inputs:
              artifactName: agent

          # Upload agent packages to Azure blob storage and refresh Azure CDN
          - powershell: |
              Write-Host "Preloading Azure modules." # This is for better performance, to avoid module-autoloading.
              Import-Module AzureRM, AzureRM.profile, AzureRM.Storage, Azure.Storage, AzureRM.Cdn -ErrorAction Ignore -PassThru
              Enable-AzureRmAlias -Scope CurrentUser
              $uploadFiles = New-Object System.Collections.ArrayList
              $certificateThumbprint = (Get-ItemProperty -Path "$(ServicePrincipalReg)").ServicePrincipalCertThumbprint
              $clientId = (Get-ItemProperty -Path "$(ServicePrincipalReg)").ServicePrincipalClientId
              Write-Host "##vso[task.setsecret]$certificateThumbprint"
              Write-Host "##vso[task.setsecret]$clientId"
              Login-AzureRmAccount -ServicePrincipal -CertificateThumbprint $certificateThumbprint -ApplicationId $clientId -TenantId $(TenantId)
              Select-AzureRmSubscription -SubscriptionId $(SubscriptionId)
              $storage = Get-AzureRmStorageAccount -ResourceGroupName vstsagentpackage -AccountName vstsagentpackage
              $versionDir = "${{ parameters.version }}"
              Get-ChildItem -LiteralPath "$(System.ArtifactsDirectory)/agent" | ForEach-Object {
                $target=$_
                Get-ChildItem -LiteralPath "$(System.ArtifactsDirectory)/agent/$target" -Include "*.zip","*.tar.gz" | ForEach-Object {
                  $executable = $_
                  Write-Host "Uploading $executable to BlobStorage vstsagentpackage/agent/$versionDir"
                  Set-AzureStorageBlobContent -Context $storage.Context -Container agent -File "$(System.ArtifactsDirectory)/agent/$target/$executable" -Blob "$versionDir/$executable" -Force
                  $uploadFiles.Add("/agent/$versionDir/$executable")
                }
              }
              Write-Host "Purge Azure CDN Cache"
              Unpublish-AzureRmCdnEndpointContent -EndpointName vstsagentpackage -ProfileName vstsagentpackage -ResourceGroupName vstsagentpackage -PurgeContent $uploadFiles
              Write-Host "Force Refresh Azure CDN Cache"
              Publish-AzureRmCdnEndpointContent -EndpointName vstsagentpackage -ProfileName vstsagentpackage -ResourceGroupName vstsagentpackage -LoadContent $uploadFiles
            displayName: Upload to Azure Blob
